name: THALL - Build and Push all applications to DockerHub

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ci-${{ github.ref }}
    strategy:
      matrix:
        applications:
          - language: ruby
            application: ruby/app
            build-flags: --build-arg RUBY_ARCHITECTURE=linux
            dockerfile: ruby/Dockerfile
            image: salizzar/thall-ruby:latest
            has_snyk_support: true

          - language: python
            application: python/app
            build-flags: ''
            dockerfile: python/Dockerfile
            image: salizzar/thall-python:latest
            has_snyk_support: true

          - language: nodejs
            application: nodejs/app
            build-flags: ''
            dockerfile: nodejs/Dockerfile
            image: salizzar/thall-nodejs:latest
            has_snyk_support: true

          - language: golang
            application: golang/app
            build-flags: ''
            dockerfile: golang/Dockerfile
            image: salizzar/thall-golang:latest
            has_snyk_support: true

          - language: eiffel
            application: eiffel/app
            build-flags: ''
            dockerfile: eiffel/Dockerfile
            image: salizzar/thall-eiffel:latest
            has_snyk_support: false

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"

      - name: Display current tool's versions
        run: |
          yarn global add snyk
          echo "aws: `aws --version`"
          echo "jq: `jq --version`"
          echo "node: `node --version`"
          echo "npm: `npm --version`"
          echo "docker: `docker --version`"
          echo "ruby: `ruby --version`"
          echo "python: `python --version`"
          echo "golang: `go version`"
          echo "snyk : `snyk --version`"

      - name: Get short SHA and tag
        id: get-short-sha-and-tag
        run: |
          echo "::set-output name=sha::`echo ${{ github.sha }} | cut -b 1-7`"
          echo "::aet-output name=tag::`echo ${{ steps.bump-version.outputs.new_tag }} | awk -F '-' '{ print $1 }'`"

      - name: Build environment map
        id: build-environment-json
        run: |
          echo "::set-output name=map::`echo '{\"environments\":{\"main\":\"production\",\"dev\":\"development\"}}'`"

      - name: Get environment json map
        run: |
          echo "${{ steps.build-environment-json.outputs.map }}"

      - name: Get environment branch
        id: get-current
        run: |
          echo "::set-output name=branch::${{github.ref_name}}"

      - name: Get environment name based on map
        id: get-environment
        run: |
          echo "::set-output name=name::`echo '${{ steps.build-environment-json.outputs.map }}' | jq -r .environments.${{ steps.get-current.outputs.branch }}`"

      - name: Generate version for every container
        run: |
          cat <<EOF > version.json
          {
            "sha": "${{ steps.get-short-sha-and-tag.outputs.sha }}",
            "tag": "${{ steps.get-short-sha-and-tag.outputs.tag }}",
            "env": "${{ steps.get-environment.outputs.name }}",
            "branch": "${{ steps.get-current.outputs.branch }}"
          }
          cp version.json ruby/app python/app


      #
      # hadolint
      #
      - name: Pull hadolint image
        run: |
          docker pull hadolint/hadolint

      - name: Use hadolint to sanitize Dockerfiles
        run: |
          echo "Checking ${{ language }}..."
          docker container run --rm -i hadolint/hadolint hadolint "$@" - < ${{ dockerfile }}
          echo "Checking Python..."
          docker container run --rm -i hadolint/hadolint hadolint "$@" - <
          echo "Checking Golang..."
          docker container run --rm -i hadolint/hadolint hadolint "$@" - < golang/Dockerfile
          echo "Checking Node.js..."
          docker container run --rm -i hadolint/hadolint hadolint "$@" - < nodejs/Dockerfile
          echo "Checking Eiffel..."
          docker container run --rm -i hadolint/hadolint hadolint "$@" - < eiffel/Dockerfile

      - name: Run Snyk to check vulnerabilities in all projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          echo "Authenticating into snyk..."
          snyk auth ${SNYK_TOKEN}
          echo "Checking Ruby..."
          snyk test --target-dir ruby/app
          echo "Checking Python..."
          snyk test --target-dir python/app --skip-unresolved # this is ugly, snyk
          echo "Checking Golang..."
          snyk test --target-dir golang/app
          echo "Checking Node.js..."
          snyk test --target-dir nodejs/app
          # FIXME: Eiffel is not supported
          # echo "Checking Eiffel..."
          # snyk test --target-dir eiffel


      #
      # snyk
      #
      - name: Run Snyk again to check vulnerabilities in Ruby Docker image
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        uses: snyk/actions/docker@master
        with:
          image: salizzar/thall-ruby:latest
          args: --file=ruby/Dockerfile

      - name: Run Snyk again to check vulnerabilities in Python Docker image
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        uses: snyk/actions/docker@master
        with:
          image: salizzar/thall-python:latest
          args: --file=python/Dockerfile

      - name: Run Snyk again to check vulnerabilities in Golang Docker image
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        uses: snyk/actions/docker@master
        with:
          image: salizzar/thall-golang:latest
          args: --file=golang/Dockerfile

      - name: Run Snyk again to check vulnerabilities in Nodejs Docker image
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        uses: snyk/actions/docker@master
        with:
          image: salizzar/thall-nodejs:latest
          args: --file=nodejs/Dockerfile

      - name: Run Snyk again to check vulnerabilities in Eiffel Docker image
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        uses: snyk/actions/docker@master
        with:
          image: salizzar/thall-eiffel:latest
          args: --file=eiffel/Dockerfile


      #
      # dockerhub
      #
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.MPC_DOCKER_USERNAME }}
          password: ${{ secrets.MPC_DOCKER_PERSONAL_TOKEN }}

      - name: Build and push Ruby image to DockerHub
        uses: docker/build-push-action@v3
        with:
          build-args: |
            RUBY_ARCHITECTURE=linux
          context: ./ruby
          tags: salizzar/thall-ruby:latest
          push: true

      - name: Build and push Python image to DockerHub
        uses: docker/build-push-action@v3
        with:
          context: ./python
          tags: salizzar/thall-python:latest
          push: true

      - name: Build and push Golang image to DockerHub
        uses: docker/build-push-action@v3
        with:
          context: ./golang
          tags: salizzar/thall-golang:latest
          push: true

      - name: Build and push Node.js image to DockerHub
        uses: docker/build-push-action@v3
        with:
          context: ./nodejs
          tags: salizzar/thall-nodejs:latest
          push: true

      - name: Build and push Eiffel image to DockerHub
        uses: docker/build-push-action@v3
        with:
          context: ./eiffel
          tags: salizzar/thall-eiffel:latest
          push: true

